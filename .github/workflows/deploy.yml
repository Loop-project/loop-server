name: CI/CD to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 3. JDK 설정
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4. Gradle 빌드 (캐시 비활성화)
      - name: Build JAR
        run: ./gradlew clean --no-build-cache bootJar

      # 5. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. ECR 로그인
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      # 7. Docker 이미지 빌드 (커밋 SHA 태그)
      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .

      # 8. Docker 이미지 푸시
      - name: Push Docker image
        run: docker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      # 9. EC2에 배포 (기존 컨테이너 중지 → 새 컨테이너 실행)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
            docker stop loop-server || true
            docker rm loop-server || true
            docker run -d -p 8080:8080 --name loop-server \
              -e DB_URL='${{ secrets.DB_URL }}' \
              -e DB_USERNAME='${{ secrets.DB_USERNAME }}' \
              -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              -e AWS_REGION='${{ secrets.AWS_REGION }}' \
              -e AWS_S3_BUCKET='${{ secrets.AWS_S3_BUCKET }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e JWT_ACCESS_TOKEN_VALIDITY='${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }}' \
              -e JWT_REFRESH_TOKEN_VALIDITY='${{ secrets.JWT_REFRESH_TOKEN_VALIDITY }}' \
              ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      # 10. 헬스체크 (Swagger API 확인)
      - name: Health check
        run: |
          sleep 10
          curl -f http://${{ secrets.EC2_HOST }}:8080/v3/api-docs || exit 1
